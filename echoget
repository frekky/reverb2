#!/bin/bash

# Copyright (C) 2018 Frekk van Blagh et al.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


RAW_MULTIPLEX_BIN="$(dirname $0/raw_multiplex)"
PIDFILE=$(mktemp /tmp/echoget-$USER-pids-XXXXXXXX.xml)
JUNKFILES=$(mktemp /tmp/echoget-$USER-junkfiles-XXXXXXXX.xml)
xmltmp=`mktemp -u /tmp/echoget-$USER-presentation-XXXXXXXX.xml`
swftmp=`mktemp -u /tmp/echoget-$USER-XXXXXXXX.swf`

trap doExit INT

echo "$JUNKFILES $PIDFILE $xmltmp $swftmp" >> $JUNKFILES

# usage: swfcat <swfs_var>
# swfs_var is name of environment variable that contains list of SWF files.
function swfcat {
    SWFS=($(eval echo \$$1))
    GNASH_PIPE="/tmp/echoget-$(uuidgen -r)"
    
    echo $GNASH_PIPE >> $JUNKFILES
    
    # iterate over array indices
    for i in ${!SWFS[@]}; do
        SWF_FILE=${SWFS[$i]}

        #echo "Processing frame $i: '...$(tail -c30 <<< "$SWF_1")' and '...$(tail -c30 <<< "$SWF_2")'" 1>&2

        # Dump the SWF file to raw video
        mkfifo "$GNASH_PIPE"
        dump-gnash -D "$GNASH_PIPE@10" -1 "$SWF_FILE" 2>&1 > /dev/null &
        GNASH_PID=$!
        echo $GNASH_PID >> $PIDFILE

        # Now grab the first ~150 frames (the last frame is duplicated for some reason)
        head --bytes=$(($WIDTH * $HEIGHT * 4 * $WANTFRAMES)) "$GNASH_PIPE"
        wait $GNASH_PID

        rm -f "$GNASH_PIPE"
    done
    
}

function doExit {
    #echo "Killing garbage: $(jobs -p) $(cat $PIDFILE)"
    for x in $(cat $PIDFILE); do
        kill -9 $x 2>/dev/null
    done
    for x in $(cat $JUNKFILES); do
        #echo "removing $x"
        ls -l $x
        rm -f $x 2>/dev/null
    done
}

outdir=$(dirname $2)

# ffmpeg fussy about extensions
outname="${2%.mp4}"

if [ "x$1" == "x" ] || [ "x$2" == "x" ]; then
    echo "Usage: $0 <presentation.xml URL> <output name>"
    echo "Output name may be unit code, for example."
    doExit
    exit 1
fi

if ! which mktemp wget ffmpeg dirname dump-gnash swfdump xmllint uuidgen $RAW_MULTIPLEX_BIN >/dev/null; then
    echo "Please note: swfdump (part of swftools), xmllint, dump-gnash (part of gnash, see README), ffmpeg and wget must be installed for this script to work."
    echo "You must also compile raw-multiplex."
    doExit
    exit 1
fi

# presentation.xml contains relative paths
wget -q -O "$xmltmp" "$1"

# a / is a / is a /
presdir=`dirname "$1"`

swfsubdir=`xmllint --xpath "string(//session-info/group[@type='projector']/track[@type='flash-movie']/@directory)" "$xmltmp"`
swfdir="$presdir"/"$swfsubdir"/
swfsubdir2=`xmllint --xpath "string(//session-info/group[@type='projector2']/track[@type='flash-movie']/@directory)" "$xmltmp"`
swfdir2="$presdir"/"$swfsubdir2"/

# Feed gnash the URLs to the swf files (stream 1 and 2)
SWF_FILES=`xmllint --xpath "//session-info/group[@type='projector']/track[@type='flash-movie']/data/@uri" "$xmltmp" | sed s#uri=\"#"$swfdir"#g | sed 's/"//g'`
SWF_FILES_2=`xmllint --xpath "//session-info/group[@type='projector2']/track[@type='flash-movie']/data/@uri" "$xmltmp" | sed s#uri=\"#"$swfdir2"#g | sed 's/"//g'`

audio="$presdir"/audio.mp3

# Fetch first file to determine resolution
firstswf=`xmllint --xpath "//session-info/group[@type='projector']/track[@type='flash-movie']/data[1]/@uri" "$xmltmp" | sed s#uri=\"#"$swfdir"#g | sed 's/"//g'`

wget -q -O "$swftmp" $firstswf

HEIGHT=$(swfdump -Y "$swftmp" | sed 's/-Y //g')
WIDTH=$(swfdump -X "$swftmp" | sed 's/-X //g')
FPS=$(swfdump -r "$swftmp" | sed 's/-r //g')
FRAMES=$(swfdump -f "$swftmp" | sed 's/-f //g')

if [ "x$WIDTH" == "x" ] || [ "x$HEIGHT" == "x" ] || [ "x$FPS" == "x" ] || [ "x$FRAMES" == "x" ]; then
    echo "Error getting SWF parameters!"
    doExit
    exit 1;
fi

WANTFRAMES=$(($FRAMES-1))
FULLWIDTH=$(($WIDTH*2))

ffmpegargs="-r $FPS -s:v ${WIDTH}x${HEIGHT}"

echo ffmpeg args: "$ffmpegargs"

# output path is date-formatted for your convenience
timestamp=`xmllint --xpath "//session-info/presentation-properties/start-timestamp/text()" "$xmltmp"`
udate=`date --date="$(echo $timestamp | head -c10 | awk -F '/' '{print $3"-"$2"-"$1}')" +'%s'`

lectureid=$(xmllint --xpath "//session-info/presentation-properties/start-timestamp/text()" "$xmltmp" | md5sum | head -c8)

outpath="${outname}_$(date --date="@${udate}" +"%Y-%m-%d")_${lectureid}.mp4"

listfile="$outdir/lectures.txt"

if [ ! -f "$listfile" ]; then
    echo "# Lecture File                              Date             URL" > $listfile
fi

if [ -f "$outpath" ]; then
    echo "Output file at: $outpath already exists! Please remove first."
    doExit
    exit 1
fi

echo "${outpath}    $(date --date="@${udate}" +"%Y-%m-%d")    ${1}" >> $listfile
echo "Creating output at: $outpath"

mkdir -p `dirname "$outpath"`
rm -f "$outpath" 2>/dev/null

if echo "$@" | grep ' -n' > /dev/null; then
    echo "Called with '-n', not doing anything!"
    doExit
    exit 0
fi

SESSION_ID="$(uuidgen -r)"

STREAM_1="/tmp/echoget-$SESSION_ID"
STREAM_2="/tmp/echoget-$SESSION_ID-2"

mkfifo $STREAM_1 $STREAM_2

(swfcat SWF_FILES > $STREAM_1) &
echo $! >> $PIDFILE
(swfcat SWF_FILES_2 > $STREAM_2) &
echo $! >> $PIDFILE

echo "$STREAM_1 $STREAM_2" >> $JUNKFILES

FFMPEG_ARGS="
        -f rawvideo -pix_fmt rgb32 $ffmpegargs -i file:$STREAM_1 \
        -f rawvideo -pix_fmt rgb32 $ffmpegargs -i file:$STREAM_2 \
        -i $audio -acodec copy \
        -filter_complex hstack=inputs=2:shortest=0 \
        -c:v libx264 -preset medium -max_muxing_queue_size 10000000 \
        -hide_banner -tune stillimage -loglevel 32 $outpath"
        
echo "ffmpeg $FFMPEG_ARGS"

ffmpeg $FFMPEG_ARGS

doExit
