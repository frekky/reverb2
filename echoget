#!/bin/bash

RAW_MULTIPLEX_BIN="$(dirname $0/raw_multiplex)"

function swfcat {
    SWFS=($(eval echo \$$1))
    SWFS2=($(eval echo \$$2))
    
    # iterate over array indices
    for i in ${!SWFS[@]}; do
        SWF_1=${SWFS[$i]}
        SWF_2=${SWFS2[$i]}
        #echo "key=$i"
        #echo "Processing frame $i: '...$(tail -c30 <<< "$SWF_1")' and '...$(tail -c30 <<< "$SWF_2")'" 1>&2
        PIPE_1=$(mktemp)
        PIPE_2=$(mktemp)

        # Here comes the real magic
        dump-gnash -D "$PIPE_1"@10 -1 "$SWF_1" > /dev/null &
        dump-gnash -D "$PIPE_2"@10 -1 "$SWF_2" > /dev/null &

        # wait for jobs to finish        
        wait $(jobs -p)

        # now stick them together
        $RAW_MULTIPLEX_BIN "$PIPE_1" "$PIPE_2" "$WIDTH" "$HEIGHT" "$WANTFRAMES" 4 2> /dev/null

       rm -f "$PIPE_1"
       rm -f "$PIPE_2"
    done
}

outdir=$(dirname $2)

# ffmpeg fussy about extensions
outname="${2%.mp4}"

if [ "x$1" == "x" ] || [ "x$2" == "x" ]; then
    echo "Usage: $0 <presentation.xml URL> <output name>"
    echo "Output name may be unit code, for example."
    exit 1
fi

if ! which mktemp wget ffmpeg dirname dump-gnash swfdump xmllint uuidgen $RAW_MULTIPLEX_BIN >/dev/null; then
    echo "Please note: swfdump (part of swftools), xmllint, dump-gnash (part of gnash, see README), ffmpeg and wget must be installed for this script to work."
    echo "You must also compile raw-multiplex."
    exit 1
fi

# presentation.xml contains relative paths
xmltmp=`mktemp -u /tmp/echoget-$USER-presentation-XXXXXXXX.xml`
swftmp=`mktemp -u /tmp/echoget-$USER-XXXXXXXX.swf`
wget -q -O "$xmltmp" "$1"

# a / is a / is a /
presdir=`dirname "$1"`

swfsubdir=`xmllint --xpath "string(//session-info/group[@type='projector']/track[@type='flash-movie']/@directory)" "$xmltmp"`
swfdir="$presdir"/"$swfsubdir"/
swfsubdir2=`xmllint --xpath "string(//session-info/group[@type='projector2']/track[@type='flash-movie']/@directory)" "$xmltmp"`
swfdir2="$presdir"/"$swfsubdir2"/

# Feed gnash the URLs to the swf files (stream 1 and 2)
SWF_FILES=`xmllint --xpath "//session-info/group[@type='projector']/track[@type='flash-movie']/data/@uri" "$xmltmp" | sed s#uri=\"#"$swfdir"#g | sed 's/"//g'`
SWF_FILES_2=`xmllint --xpath "//session-info/group[@type='projector2']/track[@type='flash-movie']/data/@uri" "$xmltmp" | sed s#uri=\"#"$swfdir2"#g | sed 's/"//g'`

audio="$presdir"/audio.mp3

# Fetch first file to determine resolution
firstswf=`xmllint --xpath "//session-info/group[@type='projector']/track[@type='flash-movie']/data[1]/@uri" "$xmltmp" | sed s#uri=\"#"$swfdir"#g | sed 's/"//g'`
wget -q -O "$swftmp" "$firstswf"

HEIGHT=$(swfdump -Y "$swftmp" | sed 's/-Y //g')
WIDTH=$(swfdump -X "$swftmp" | sed 's/-X //g')
FPS=$(swfdump -r "$swftmp" | sed 's/-r //g')
FRAMES=$(swfdump -f "$swftmp" | sed 's/-f //g')
WANTFRAMES=$(($FRAMES-1))

FULLWIDTH=$(($WIDTH*2))
ffmpegargs="-r $FPS -s:v ${FULLWIDTH}x${HEIGHT}"

rm -f "$swftmp"
echo ffmpeg args: "$ffmpegargs"

# output path is date-formatted for your convenience
timestamp=`xmllint --xpath "//session-info/presentation-properties/start-timestamp/text()" "$xmltmp"`
udate=`date --date="$(echo $timestamp | head -c10 | awk -F '/' '{print $3"-"$2"-"$1}')" +'%s'`

lectureid=$(xmllint --xpath "//session-info/presentation-properties/start-timestamp/text()" "$xmltmp" | md5sum | head -c8)

outpath="${outname}_$(date --date="@${udate}" +"%Y-%m-%d")_${lectureid}.mp4"

listfile="$outdir/lectures.txt"

if [ ! -f "$listfile" ]; then
    echo "# Lecture File                              Date             URL" > $listfile
fi

if [ -f "$outpath" ]; then
    echo "Output file at: $outpath already exists! Please remove first."
    exit 1
fi

echo "${outpath}    $(date --date="@${udate}" +"%Y-%m-%d")    ${1}" >> $listfile
echo "Creating output at: $outpath"

mkdir -p `dirname "$outpath"`
rm -f "$outpath"
rm -f "$xmltmp"

export SWF_FILES
export SWF_FILES_2

if echo "$@" | grep ' -n' > /dev/null; then
    echo "Called with '-n', not doing anything!"
    exit 0
fi

#PIPE_1="/tmp/echoget-$(uuidgen -r)"
#PIPE_2="$PIPE_1-2"

# mkfifo "$PIPE_1" "$PIPE_2"

(swfcat SWF_FILES SWF_FILES_2) | ffmpeg -f rawvideo -pix_fmt rgb32 $ffmpegargs \
                                    -i - -i "$audio" -acodec copy -c:v libx264 -preset medium -hide_banner -tune stillimage -loglevel 32 "$outpath"

rm "$PIPE_1" "$PIPE_2"
