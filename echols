#!/usr/bin/env python3

from urllib.parse import urljoin
from lxml import html, etree
from subprocess import call
from shlex import quote
import itertools
import re
from os import system
from sys import argv
import argparse
import re
import sys


class URL:
    _CHILD_LINK_RE = re.compile(r'^[^?/]+/?$')
    def __init__(self, *url):
        url = list(map(str, url))
        try:
            url = urljoin(*url)
        except TypeError:
            url, = url
        
        self._listable = url.endswith('/')
        self._url = url
    
    def __str__(self):
        return self._url

    def __repr__(self):
        return '%s(%r)' % (self.__class__.__name__, str(self))
    
    def _subdir_names(self):
        links = html.parse(self._url).xpath('//body//a/@href')
        return filter(self._CHILD_LINK_RE.match, links)
    
    def __iter__(self):
        if not self._listable:
            raise TypeError
        
        return (self.__class__(self, l) for l in self._subdir_names())


class EchoBase(URL):
    _BAD_WORDS = ['/assets/','/downloads/','/int/','/sections/','/templates/']

    def __iter__(self):
        # only return sub-*directories*
        subdirs = (s for s in super().__iter__() if str(s).endswith('/'))
        return iter(sorted(subdirs, key=str, reverse=True))
    
    @property
    def presentations(self):
        if any(bad in str(self) for bad in self._BAD_WORDS):
            return ()
        
        try:
            return EchoPres(self),
        
        except ValueError:
            return (pres for sub in self for pres in sub.presentations)


class EchoPres:
    def __init__(self, url):
        self._base = str(url)
        self.pres_xml = urljoin(self._base, 'presentation.xml')

        try:
            self._xml = etree.parse(self.pres_xml)
        except OSError:
            raise ValueError('This is not a presentation.')

        for el in self._xml.xpath('/session-info/presentation-properties/*'):
            setattr(self, el.tag.replace(*'-_'), el.text)


if __name__ == '__main__':
    splits = (arg.split('=', 1) for arg in argv[1:-1])
    filters = [(tag.replace(*'-_'), re.compile(pat)) for (tag, pat) in splits]

    if len(argv) < 2:
        print('USAGE:  %s [TAG=REGEX ...] https://ECHO_URL/' % argv[0])
        print('Ex:     %s name=UNIT4321 start-timestamp=2017 http://media.lcs.uwa.edu.au/echocontent/' % argv[0])
        exit(1)

    for p in EchoBase(argv[-1].rstrip('/') + '/').presentations:
        if all(pat.search(getattr(p, tag)) for (tag, pat) in filters):
            print(p.pres_xml)
            sys.stdout.flush()
